package ru.inno.course.homework1;

public class Homework1 {

    public static void main(String[] args) {

        //Создаём тестовую фразу "Открывай мир в каждой секунде!"
        String catchPhrase = "Открывай мир в каждой секунде!";

        /*Далее - создаём переменные соответствующего типа,
        помещаем в них значение catchPhrase,
        /*применяем методы и изучаем результаты их работы.

        /*Метод length() возвращает длину (кол-во символов) строки, хранящейся в переменной.
        Пробелы учитываются.
         */
        int result = catchPhrase.length();
        System.out.println(result);

        /*Метод isEmpty() возвращает true, только если строка пуста.
        Любой символ или пробел в кавычках - и результат будет false.
         */
        boolean result1 = catchPhrase.isEmpty();
        System.out.println(result1);

        /*Метод isBlanc() возвращает true, если строка пуста либо заполнена только пробелами.
        В остальных случаях возвращает false;
        */
        boolean result2 = catchPhrase.isBlank();
        System.out.println(result2);

        /*Метод substring() возвращает участок строки, заданный "границами" - аргументами с типом int,
        обозначающими номер символа. При этом символ, указанный первым аргументом, обрезается,
        а символ, указанный вторым аргументом, возвращается. Нарушение типа переменных в аргументе выдаст ошибку,
        как и если один из/оба аргумента не будут указаны вовсе..
         */
        String result3 = catchPhrase.substring(3,5);
        System.out.println(result3);

        /*Метод indexOf() возвращает индекс ПЕРВОГО в строке символа, переданного в аргументе.
        Индексы начинают считаться с нуля. Передаваемый символ должен содержаться в строке. Пробел считается символом.
        Если в аргументе передано несколько последовательных символов - метод работает с первым.
        Если передать в аргументе символ, в строке не содержащийся, либо несколько содержащихся символов
        в неверном порядке - метод вернёт значение "-1". Регистр должен соблюдаться.
         */
        int result4 = catchPhrase.indexOf("р");
        System.out.println(result4);

        /*Метод lastIndexOf() возвращает индекс ПОСЛЕДНЕГО в строке символа, переданного в аргументе.
        Передаваемый символ должен содержаться в строке. Пробел считается символом.
        Если в аргументе передано несколько последовательных символов - метод работает с первым.
        Если передать в аргументе символ, в строке не содержащийся, либо несколько содержащихся символов
        в неверном порядке - метод вернёт значение "-1". Регистр должен соблюдаться.
         */
        int result5 = catchPhrase.lastIndexOf("р");
        System.out.println(result5);

        /*Метод toLowerCase() возвращает строку, приведённую к нижнему регистру. Метод работает только с буквами;
        он пропустит цифры, пробелы, знаки препинания и другие символы, оставив их без изменений.
         */
        String result6 = catchPhrase.toLowerCase();
        System.out.println(result6);

        /*Метод toUpperCase() возвращает строку, приведённую к верхнему регистру. Метод работает только с буквами;
        он пропустит цифры, пробелы, знаки препинания и другие символы, оставив их без изменений.
         */
        String result7 = catchPhrase.toUpperCase();
        System.out.println(result7);

        /*Метод replace() заменяет в строке символ(ы), указанные в первом аргументе, на символ(ы), указанные во втором.
        Если символы-цели в строке отсутствуют - строка останется без изменений. Если в первом аргументе оставить
        кавычки пустыми, то пространство между каждым символом в строке заменится на то, что было указано во
        втором аргументе. Если методы не указать или указать некорректно - возникнет ошибка.
         */
        String result8 = catchPhrase.replace("р","л");
        System.out.println(result8);

        /*Метод startsWith() возвращает true, если строка начинается с указанного в аргументе префикса; в противном
        случае - false. Даже если оставить префикс пустым "" - всё равно будет true. Метод учитывает регистр и пробелы.
         */
        boolean result9 = catchPhrase.startsWith("Отк");
        System.out.println(result9);

        /*Метод endsWith() возвращает true, если строка кончается указанным в аргументе постфиксом; в противном
        случае - false. Даже если оставить постфикс пустым "" - всё равно будет true. Метод учитывает регистр и пробелы.
         */
        boolean result10 = catchPhrase.endsWith("е!");
        System.out.println(result10);

        /*Метод repeat() возвращает содержимое переменной столько раз, сколько передано в аргументе. Если в аргументе
        ничего не передать или передать не тот тип данных - возникнет ошибка. Автоматического пробела после каждого
        повтора нет.
         */
        String result11 = catchPhrase.repeat(3);
        System.out.println(result11);

        /*Метод contains() возвращает true, если переменная содержит символ или последовательность символов, переданную
        в аргументе. Если последовательность нарушена - false. Если передать в аргументе пустоту в "" - метод вернёт
        true. Если не передавать ничего или передать не тот тип данных в аргументе - возникнет ошибка.
         */
        boolean result12 = catchPhrase.contains("рим");
        System.out.println(result12);

        /*Метод concat() возвращает новое значение переменной, прибавив к старому значению переданный аргумент.
        Метод сработает, даже если передать в "" пустоту. Если не передавать ничего или передать не тот тип данных
        в аргументе - возникнет ошибка.
         */
        String result13 = catchPhrase.concat(" И восторгайся им!");
        System.out.println(result13);

        /*Метод trim() возвращает строку, обрезав любое кол-во пробелов, а также табуляцию, перед первым символом
        в строке, и после символа, стоящего в строке последним. Если строка состояла только из пробелов - метод
        вернёт пустую строку.
         */
        String result14 = catchPhrase.trim();
        System.out.println(result14);

        /*Метод equals() возвращает true, если содержимое переменной ПОЛНОСТЬЮ соответствует строке, переданной в
        аргументе. В противном случае - false. Метод чувствителен к регистру, учитывает пробелы. Если не передавать
        в аргументе ничего или передать не тот тип данных - возникнет ошибка.
         */
        boolean result15 = catchPhrase.equals("Открывай мир в каждой секунде!");
        System.out.println(result15);

    }

}

